totalFunctions:334 totalFuncComment:180 totalFuncFound:214
ImportRGBAQuantumType #cmm:0
ExportRGBAQuantumType #cmm:0
SetNexus #cmm:1 #$# + S e t N e x u sSetNexus() defines the region of the cache for the specified cache nexus.The format of the SetNexus() method is:PixelPacket SetNexus(const Image image,const long x,const long y, const unsigned long columns, const unsigned long rows, NexusInfo nexus_info, MagickBool set, ExceptionInfo exception)A description of each parameter follows:o pixels: SetNexus() returns a pointer to the pixels associated with the specified cache nexus.o image: The image.o x,y,columns,rows:These values define the perimeter of a region of pixels.o nexus_info: specifies which cache nexus to set.o set: Set to one if pixels are being updated/set rather than read.o exception: any error is reported here.static PixelPacket
ImportViewPixelArea #cmm:0
ModifyCache #cmm:1 #$# M o d i f y C a c h eModifyCache() ensures that there is only a single reference to the pixel cache to be modified, updating the provided cache pointer to point to a clone of the original pixel cache if necessary.This is used to implement copy on write.The format of the ModifyCache method is:MagickPassFail ModifyCache(Image image, ExceptionInfo exception)A description of each parameter follows:o image: The image.o exception: Errors are reported here. MagickPassFail
SetCacheNexus #cmm:1 #$# + S e t C a c h e N e x u sSetCacheNexus() allocates an area to store image pixels as defined by the region rectangle and returns a pointer to the area.This area is subsequently transferred from the pixel cache with SyncCacheNexus().A pointer to the pixels is returned if the pixels are transferred, otherwise a NULL is returned.The format of the SetCacheNexus() method is:PixelPacket SetCacheNexus(Image image,const long x,const long y,const unsigned long columns,const unsigned long rows,NexusInfo nexus_info,ExceptionInfo exception)A description of each parameter follows:o pixels: SetCacheNexus() returns a pointer to the pixels if they are transferred, otherwise a NULL is returned.o image: The image.o x,y,columns,rows:These values define the perimeter of a region of pixels.o nexus_info: specifies which cache nexus to set.o exception: any error is reported here. static PixelPacket
ReadOnePNGImage #cmm:1 #$# R e a d O n e P N G I m a g eMethod ReadOnePNGImage reads a Portable Network Graphics (PNG) image file (minus the 8-byte signature)and returns it.It allocates the memory necessary for the new Image structure and returns a pointer to the new image.The format of the ReadOnePNGImage method is:Image ReadOnePNGImage(MngInfo mng_info, const ImageInfo image_info,ExceptionInfo exception)A description of each parameter follows:o image:Method ReadOnePNGImage returns a pointer to the image after reading.A null image is returned if there is a memory shortage or if the image cannot be read.o mng_info: Specifies a pointer to a MngInfo structure.o image_info: Specifies a pointer to a ImageInfo structure.o exception: return any errors or warnings in this structure.
AcquireCacheNexus #cmm:0
SyncCacheViewPixels #cmm:1 #$# S y n c C a c h e V i e w P i x e l sSyncCacheViewPixels() saves the view pixels to the in-memory or disk cache. The method returns MagickPass if the pixel region is synced, otherwise MagickFail.The format of the SyncCacheViewPixels method is:MagickPassFail SyncCacheViewPixels(const ViewInfo view,ExceptionInfo exception)A description of each parameter follows:o view: The address of a structure of type ViewInfo.o exception: Any errors are reported here. MagickExport MagickPassFail
QueryColorDatabase #cmm:1 #$# Q u e r y C o l o r D a t a b a s eQueryColorDatabase() returns the red, green, blue, and opacity intensities for a given color name.The format of the QueryColorDatabase method is:unsigned int QueryColorDatabase(const char name,PixelPacket color, ExceptionInfo exception)A description of each parameter follows:o name: The color name (e.g. white, blue, yellow).o color: The red, green, blue, and opacity intensities values of the named color in this structure.o exception: Return any errors or warnings in this structure.MagickExport unsigned int
MagickStrlCpy #cmm:1 #$# M a g i c k S t r l C p y Method MagickStrlCpy copies up to size - 1 characters from the NULL- terminated string src to dst, NULL-terminating the result. If size is zero, then the result is not NULL terminated.The total length of the string which would have been created given sufficient buffer size (may be longer than size) is returned. This function is simlar to strlcpy() which is available under FreeBSD, Apple's OS-X, and Solaris 8 except that it is assured to work with overlapping objects.FreeBSD does not document if strlcpy() handles overlapping objects, but Solaris strlcpy() does not.Buffer overflow can be checked asfollows:if (MagickStrlCpy(dst, src, dstsize) >= dstsize) return -1;The format of the MagickStrlCpy method is:size_t MagickStrlCpy(char dst, const char src, size_t size)A description of each parameter follows. odst:Destination string. osrc:Source string. osize: Maximum string length, including the terminating null.
UnlockSemaphoreInfo #cmm:1 #$# U n l o c k S e m a p h o r e I n f oMethod UnlockSemaphoreInfo unlocks a semaphore.The format of the LockSemaphoreInfo method is:void UnlockSemaphoreInfo(SemaphoreInfo semaphore_info)A description of each parameter follows:o semaphore_info: Specifies a pointer to an SemaphoreInfo structure.
LockSemaphoreInfo #cmm:1 #$# L o c k S e m a p h o r e I n f oMethod LockSemaphoreInfo locks a semaphore.The format of the LockSemaphoreInfo method is:void LockSemaphoreInfo(SemaphoreInfo semaphore_info)A description of each parameter follows:o semaphore_info: Specifies a pointer to an SemaphoreInfo structure.
SetImagePixels #cmm:1 #$# S e t I m a g e P i x e l sSetImagePixels() initializes a pixel region for write-only access. If the region is successfully intialized a pointer to a PixelPacket array representing the region is returned, otherwise NULL is returned. The returned pointer may point to a temporary working buffer for the pixels or it may point to the final location of the pixels in memory.Write-only access means that any existing pixel values corresponding to the region are ignored.This is useful while the initial image is being created from scratch, or if the existing pixel values are to be completely replaced without need to refer to their pre-existing values. The application is free to read and write the pixel buffer returned by SetImagePixels() any way it pleases. SetImagePixels() does not initialize the pixel array values. Initializing pixel array values is the application's responsibility.Performance is maximized if the selected area is part of one row, or one or more full rows, since then there is opportunity to access the pixels in-place (without a copy) if the image is in RAM, or in a memory-mapped file. The returned pointer should never be deallocated by the user.Pixels accessed via the returned pointer represent a simple array of type PixelPacket. If the image storage class is PsudeoClass, call GetIndexes() after invoking GetImagePixels() to obtain the colormap indexes (of type IndexPacket) corresponding to the region.Once the PixelPacket (and/or IndexPacket) array has been updated, the changes must be saved back to the underlying image using SyncCacheNexus() or they may be lost.The format of the SetImagePixels() method is:PixelPacket SetImagePixels(Image image,const long x,const long y, const unsigned long columns,const unsigned long rows)A description of each parameter follows:o pixels: SetImagePixels returns a pointer to the pixels if they are transferred, otherwise a NULL is returned.o image: The image.o x,y,columns,rows:These values define the perimeter of a region of pixels.MagickExport PixelPacket
ExportViewPixelArea #cmm:0
LocaleCompare.part.6 #cmm:0
ImportImagePixelArea #cmm:1 #$# I m p o r t I m a g e P i x e l A r e aImportImagePixelArea() transfers one or more pixel components from a user supplied buffer into the default image pixel cache view. By default, values are read in network (big-endian) byte/bit order.By setting the 'endian' member of ExportPixelAreaOptions, 16, 32 and 64-bit values may be output as little (LSBEndian), big (MSBEndian), or host native (NativeEndian) endian values.This function is quite powerful in that besides common native CPU type sizes, it can support any integer bit depth from 1 to 32 (e.g. 13), 64-bits, as well as 32 and 64-bit float.MagickPass is returned if the pixels are successfully transferred, otherwise MagickFail.The format of the ImportImagePixelArea method is:MagickPassFail ImportImagePixelArea(Image image, const QuantumType quantum_type, const unsigned int quantum_size, const unsigned char source, const ImportPixelAreaOptions options, ImportPixelAreaInfo import_info)A description of each parameter follows:o status: Method PushImagePixels returns MagickPass if the pixels are successfully transferred, otherwise MagickFail.o image: The image.o quantum_type: Declare which pixel components to transfer (AlphaQuantum, BlackQuantum, BlueQuantum, CMYKAQuantum, CMYKQuantum, CyanQuantum, GrayAlphaQuantum, GrayQuantum, GreenQuantum, IndexAlphaQuantum, IndexQuantum, MagentaQuantum, RGBAQuantum, RGBQuantum, RedQuantum, YellowQuantum)o quantum_size: Bits per quantum sample (range 1-32, and 64).o source:The pixel components are transferred from this buffer.o options: Additional options specific to quantum_type (may be NULL).o import_info : Populated with information regarding the pixelsimported (may be NULL)
WriteOnePNGImage #cmm:0
SyncImagePixels #cmm:1 #$# S y n c I m a g e P i x e l sSyncImagePixels() saves the image pixels to the in-memory or disk cache. The method returns MagickPass if the pixel region is synced, otherwise MagickFail.The format of the SyncImagePixels() method is:MagickPassFail SyncImagePixels(Image image)A description of each parameter follows:o status: SyncImagePixels() returns MagickPass if the image pixels are transferred to the in-memory or disk cache otherwise MagickFail.o image: The image. MagickExport MagickPassFail
AcquireImagePixels #cmm:1 #$# A c q u i r e I m a g e P i x e l sAcquireImagePixels() obtains a pixel region for read-only access. If the region is successfully accessed, a pointer to it is returned, otherwise NULL is returned. The returned pointer may point to a temporary working copy of the pixels or it may point to the original pixels in memory. Performance is maximized if the selected area is part of one row, or one or more full rows, since then there is opportunity to access the pixels in-place (without a copy) if the image is in RAM, or in a memory-mapped file. The returned pointer should never be deallocated by the user.Pixels accessed via the returned pointer represent a simple array of type PixelPacket. If the image storage class is PsudeoClass, call GetIndexes() after invoking GetImagePixels() to obtain the colormap indexes (of type IndexPacket) corresponding to the region.If you plan to modify the pixels, use GetImagePixels() instead.The format of the AcquireImagePixels() method is:const PixelPacket AcquireImagePixels(const Image image,const long x, const long y,const unsigned long columns,const unsigned long rows, ExceptionInfo exception)A description of each parameter follows:o status: AcquireImagePixels() returns a pointer to the pixels if they are transferred, otherwise a NULL is returned.o image: The image.o x,y,columns,rows:These values define the perimeter of a region of pixels.o exception: Return any errors or warnings in this structure.MagickExport const PixelPacket
MngInfoDiscardObject #cmm:0
SetCacheViewPixels #cmm:1 #$# S e t C a c h e V i e w P i x e l sSetCacheViewPixels() gets pixels from the in-memory or disk pixel cache as defined by the geometry parameters. A pointer to the pixels is returned if the pixels are transferred, otherwise a NULL is returned.The format of the SetCacheViewPixels method is:PixelPacket SetCacheViewPixels(ViewInfo view,const long x, const long y,const unsigned long columns,const unsigned long rows)A description of each parameter follows:o view: The address of a structure of type ViewInfo.o x,y,columns,rows:These values define the perimeter of a region of pixels.o exception: Any errors are reported here. MagickExport PixelPacket
OpenCacheView #cmm:1 #$# O p e n C a c h e V i e wOpenCacheView() opens a view into the pixel cache.The format of the OpenCacheView method is:ViewInfo OpenCacheView(Image image)A description of each parameter follows:o image: The image.MagickExport ViewInfo
MagickMallocAligned #cmm:1 #$# M a g i c k M a l l o c A l i g n e dMagickMallocAligned() allocates memory and returns a pointer to a block of memory capable of storing at least size bytes with the allocation's base address being an even multiple of alignment. The size of the buffer allocation is rounded up as required in order to consume a block of memory starting at least at the requested alignment and ending at at least the requested alignment.The requested alignment should be a power of 2 at least as large as sizeof a void pointer.NULL is returned if insufficient memory is available, the requested size is zero, or integer overflow was detected.This function is intended for allocating special-purpose buffers which benefit from specific alignment.The allocated memory should only be freed using MagickFreeAligned() and may not be reallocated.The format of theMagickMallocAligned method is:voidMagickMallocAligned(size_t alignment, const size_t size)A description of each parameter follows: o alignment: The alignment of the base and size of the allocatedmemory.o size: The size of the memory in bytes to allocate.
CropImage #cmm:1 #$# C r o p I m a g eUse CropImage() to extract a region of the image starting at the offset defined by geometry.As a special feature, if the geometry 0x0 is is passed, GetImageBoundingBox() is used to locate the edges of the image and the image is cropped (trimmed) to that boundary.The format of the CropImage method is:Image CropImage(const Image image,const RectangleInfo geometry, ExceptionInfo exception)A description of each parameter follows:o image: The image.o geometry: Define the region of the image to crop with members x, y, width, and height.o exception: Return any errors or warnings in this structure.
GetCacheViewIndexes #cmm:1 #$# G e t C a c h e V i e w I n d e x e sMethod GetCacheViewIndexes returns writeable indexes associated with the specified view.The format of the GetCacheViewIndexes method is:IndexPacket GetCacheViewIndexes(const ViewInfo view)A description of each parameter follows:o indexes: Method GetCacheViewIndexes returns the indexes associated with the specified view.o view: The address of a structure of type ViewInfo.MagickExport IndexPacket
GetCacheViewArea #cmm:1 #$# + G e t C a c h e V i e w A r e aGetCacheViewArea() returns the area (widthheight in pixels) consumed by the pixel cache viewThe format of the GetCacheViewArea() method is:magick_off_t GetCacheViewArea(const ViewInfo view)A description of each parameter follows:o view: The view.MagickExport magick_off_t
GetCacheViewImage #cmm:1 #$# G e t C a c h e V i e w I m a g eMethod GetCacheViewImage returns the image which allocated the view.The format of the GetCacheViewImage method is:Image GetCacheViewImage(const ViewInfo view)A description of each parameter follows:o image: Method GetCacheViewImage returns the image which allocated the view.o view: The address of a structure of type ViewInfo.extern Image
AccessCacheViewPixels #cmm:1 #$# A c c e s s C a c h e V i e w P i x e l sMethod AccessCacheViewPixels returns writeable pixels associated with the specified view.The format of the AccessCacheViewPixels method is:PixelPacket AccessCacheViewPixels(const ViewInfo view)A description of each parameter follows:o indexes: Method AccessCacheViewPixels returns the pixels associated with the specified view.o view: The address of a structure of type ViewInfo.MagickExport PixelPacket
AccessDefaultCacheView #cmm:1 #$# Obtain the view corresponding to the current thread from the thread view set.The compiler should normally automatically inline this function when used in this module.Since we don't trust that, we also provide a static inlined version along with a macro to remap code from this module to use the inline version. MagickExport ViewInfo
SetImagePixelsEx #cmm:1 #$# S e t I m a g e P i x e l s E xSetImagePixelsEx() initializes a pixel region for write-only access. It is similar to SetImagePixels() except that any exception information is written to a user provided exception structure.The format of the SetImagePixelsEx() method is:PixelPacket SetImagePixelsEx(Image image,const long x,const long y, const unsigned long columns,const unsigned long rows, ExceptionInfo exception)A description of each parameter follows:o pixels: SetImagePixelsEx returns a pointer to the pixels if they are transferred, otherwise a NULL is returned.o image: The image.o x,y,columns,rows:These values define the perimeter of a region of pixels.o exception: Any error details are reported here.MagickExport PixelPacket
MngInfoFreeStruct.part.7 #cmm:0
MagickMonitorFormatted #cmm:1 #$# M a g i c k M o n i t o r F o r m a t t e dMagickMonitorFormatted() calls the monitor handler method with a printf type format specification and variable argument list.Also passed are quantum and span values which provide a measure of completion.The method returns MagickPass on success otherwise MagickFail if an error is encountered, e.g. if there was a user interrupt.If MagickFail is returned, the calling code is expected to terminate whatever is being monitored as soon as possible.Most callers of this function will use the QuantumTick() macro to decide when it should be called.The QuantumTick() macro is designed to deliver no more than 100 events in a span (representing 1-100) and to distribute events as evenly as possible over the span so that events are reported for every 1 of progress when possible.The format of the MagickMonitorFormatted method is:MagickPassFail MagickMonitorFormatted(const magick_int64_t quantum,const magick_uint64_t span,ExceptionInfo exception,const char format,...)A description of each parameter follows:o quantum: The position relative to the span parameter which represents how much progress has been made toward completing a task.o span: The span relative to completing a task.o exception: Return any errors or warnings in this structure.o format:A string describing the format to use to write the remaining arguments. MagickExport MagickPassFail
AcquireCacheViewPixels #cmm:1 #$# A c q u i r e C a c h e V i e w P i x e l sMethod AcquireCacheViewPixels gets pixels from the in-memory or disk pixel cache as defined by the geometry parameters for read-only access. A pointer to the pixels is returned if the pixels are transferred, otherwise NULL is returned.The format of the AcquireCacheViewPixels method is:const PixelPacket AcquireCacheViewPixels(ViewInfo view, const long x,const long y,const unsigned long columns, const unsigned long rows,ExceptionInfo exception)A description of each parameter follows:o pixels: Method AcquireCacheViewPixels returns a null pointer if an error occurs, otherwise a pointer to the view pixels.o view: The address of a structure of type ViewInfo.o x,y,columns,rows:These values define the perimeter of a region of pixels.o exception: Return any errors or warnings in this structure.MagickExport const PixelPacket
DeinitializeCacheNexus #cmm:0
ExportImagePixelArea #cmm:1 #$# E x p o r t I m a g e P i x e l A r e aExportImagePixelArea() transfers one or more pixel components from the default image pixel cache view to a user supplied buffer.By default, values are written in network (big-endian) byte/bit order.By setting the 'endian' member of ExportPixelAreaOptions, 16, 32 and 64-bit values may be output as little (LSBEndian), big (MSBEndian), or host native (NativeEndian) endian values.This function is quite powerful in that besides common native CPU type sizes, it can support any integer bit depth from 1 to 32 (e.g. 13), 64-bits as well as 32 and 64-bit float. MagickPass is returned if the pixels are successfully transferred, otherwise MagickFail.The format of the ExportImagePixelArea method is:MagickPassFail ExportImagePixelArea(const Image image, const QuantumType quantum_type, unsigned int quantum_size, unsigned char destination, const ExportPixelAreaOptions options, ExportPixelAreaInfo export_info)A description of each parameter follows:o status: Returns MagickPass if the pixels are successfully transferred, otherwise MagickFail.o image: The image.o quantum_type: Declare which pixel components to transfer (AlphaQuantum, BlackQuantum, BlueQuantum, CMYKAQuantum, CMYKQuantum, CyanQuantum, GrayAlphaQuantum, GrayQuantum, GreenQuantum, IndexAlphaQuantum, IndexQuantum, MagentaQuantum, RGBAQuantum, RGBQuantum, RedQuantum, YellowQuantum)o quantum_size: Bits per quantum sample (range 1-32, and 64).o destination:The components are transferred to this buffer.The user is responsible for ensuring that the destination buffer is large enough.o options: Additional options specific to quantum_type (may be NULL).o export_info : Populated with information regarding the pixels exported (may be NULL)
DestroyThreadViewSet.part.12 #cmm:0
GetPathComponent.part.11 #cmm:0
AllocateImage #cmm:1 #$# A l l o c a t e I m a g e AllocateImage() returns a pointer to an image structure initialized todefault values.The format of the AllocateImage method is:Image AllocateImage(const ImageInfo image_info)A description of each parameter follows:o image_info: Many of the image default values are set from this structure.For example, filename, compression, depth, background color, and others.
SyncImagePixelsEx #cmm:1 #$# S y n c I m a g e P i x e l s E xSyncImagePixelsEx() saves the image pixels to the in-memory or disk cache. The method returns MagickPass if the pixel region is synced, otherwise MagickFail.The format of the SyncImagePixelsEx() method is:MagickPassFail SyncImagePixelsEx(Image image,ExceptionInfo exception)A description of each parameter follows:o status: SyncImagePixelsEx() returns MagickPass if the image pixels are transferred to the in-memory or disk cache otherwise MagickFail.o image: The image.o exception: Any error details are reported here. MagickExport MagickPassFail
MagickFree #cmm:1 #$# M a g i c k F r e e MagickFree() frees memory that has already been allocated by MagickMalloc() or other other other allocators directly compatible with the currently defined memory allocator (which defaults to the system malloc()). For convenience, a NULL argument is ignored.The format of the MagickFree method is:void MagickFree(void memory)A description of each parameter follows:o memory: A pointer to a block of memory to free for reuse.
omp_get_thread_num@plt #cmm:0
GetCacheInfo #cmm:1 #$# + G e t C a c h e I n f oGetCacheInfo() initializes the Cache structure.The format of the GetCacheInfo() method is:void GetCacheInfo(Cache cache)A description of each parameter follows:o cache: Specifies a pointer to a Cache structure.void
CloseCacheView.part.11 #cmm:0
AllocateThreadViewSet #cmm:0
AllocateSemaphoreInfo #cmm:1 #$# A l l o c a t e S e m a p h o r e I n f oMethod AllocateSemaphoreInfo initializes the SemaphoreInfo structure.The format of the AllocateSemaphoreInfo method is:SemaphoreInfo AllocateSemaphoreInfo(void)A description of each parameter follows:o semaphore_info: Method AllocateSemaphoreInfo returns a pointer to an initialized SemaphoreInfo structure.
OpenModule #cmm:2 #$# O p e n M o d u l eOpenModule() loads a module, and invokes its registration method.It returns MagickPass on success, and MagickFail if there is an error.The format of the OpenModule method is:MagickPassFail OpenModule(const char module,ExceptionInfo exception)A description of each parameter follows:o status: Method OpenModule returns MagickPass if the specified module is loaded, otherwise MagickFail.o module: a character string that indicates the module to load.o exception: Return any errors or warnings in this structure.MagickPassFail
DestroySemaphoreInfo #cmm:1 #$# D e s t r o y S e m a p h o r e I n f oMethod DestroySemaphoreInfo destroys a semaphore.The format of the DestroySemaphoreInfo method is:void DestroySemaphoreInfo(SemaphoreInfo semaphore_info)A description of each parameter follows:o semaphore_info: Specifies a pointer to an SemaphoreInfo structure.
OpenBlob #cmm:0
LogMagickEventList #cmm:1 #$# L o g M a g i c k E v e n tLogMagickEvent() logs an event as determined by the log configuration file. If an error occurs, False is returned otherwise True.The format of the LogMagickEvent method is:unsigned int LogMagickEvent(const LogEventType type,const char module, const char function,const unsigned long line,const char format,...)A description of each parameter follows:o type: The event type.o filename: The source module filename.o function: The function name.o line: The line number of the source module.o format: The output format.
AccessMutableIndexes #cmm:1 #$# A c c e s s M u t a b l e I n d e x e sAccessMutableIndexes() returns the colormap indexes associated with the last call to SetImagePixels() or GetImagePixels(). NULL is returned if colormap indexes are not available.The format of the AccessMutagleIndexes() method is:IndexPacket AccessMutableIndexes(Image image)A description of each parameter follows:o indexes: The indexes associated with the last call toAcquireImagePixels().o image: The image.MagickExport IndexPacket
AccessImmutableIndexes #cmm:1 #$# A c c e s s I m m u t a b l e I n d e x e sAccessImmutableIndexes() returns the colormap indexes associated with the last call to AcquireImagePixels(). NULL is returned if colormap indexes are not available.The format of the AccessImmutableIndexes() method is:const IndexPacket AccessImmutableIndexes(const Image image)A description of each parameter follows:o indexes: The indexes associated with the last call toAcquireImagePixels().o image: The image.MagickExport const IndexPacket
LocaleCompare #cmm:1 #$# L o c a l e C o m p a r eMethod LocaleCompare performs a case-insensitive comparison of two strings byte-by-byte, according to the ordering of the current locale encoding. LocaleCompare returns an integer greater than, equal to, or less than 0, if the string pointed to by p is greater than, equal to, or less than the string pointed to by q respectively.The sign of a non-zero return value is determined by the sign of the difference between the values of the first pair of bytes that differ in the strings being compared.The format of the LocaleCompare method is:int LocaleCompare(const char p,const char q)A description of each parameter follows:o p: A pointer to a character string.o q: A pointer to a character string to compare to p.
UnregisterMagickInfo #cmm:1 #$# U n r e g i s t e r M a g i c k I n f oMethod UnregisterMagickInfo removes a name from the magick info list.It returns MagickFail if the name does not exist in the list otherwise MagickPass.The format of the UnregisterMagickInfo method is:unsigned int UnregisterMagickInfo(const char name)A description of each parameter follows:o status: Method UnregisterMagickInfo returns False if the name does not exist in the list otherwise True.o name: a character string that represents the image format we are looking for. MagickExport MagickPassFail
SetImageInfo #cmm:0
GetMagickFileFormat #cmm:1 #$# + G e t M a g i c k F i l e F o r m a tMethod GetMagickFileFormat inspects the provided image file/blob header bytes and sets/updates the provided file format string buffer. The value MagickPass is returned if the format was successfully identified.The value MagickFail is returned if the format was not identified or an exception occured. The format of the GetMagickFileFormat method is:MagickPassFail GetMagickFileFormat( const unsigned char header, const size_t header_length, char postulate, const size_t postulate_length, ExceptionInfo exception)A description of each parameter follows:o header: A binary string representing the first several thousand bytes of the file/blob header to test.o header_length: The length of the binary signature.Currently 2MaxTextExtent (4106 bytes).o format: Format buffer. Updated with actual format if it can be determined.o format_length: Format buffer length.o exception: Return any errors or warnings in this structure.MagickExport MagickPassFail
CloneImage #cmm:1 #$# C l o n e I m a g eCloneImage() copies an image and returns the copy as a new image object. If the specified columns and rows is 0, an exact copy of the image is returned, otherwise the pixel data is undefined and must be initialized with the SetImagePixels() and SyncImagePixels() methods.On failure, a NULL image is returned and exception describes the reason for the failure.The format of the CloneImage method is:Image CloneImage(const Image image,const unsigned long columns, const unsigned long rows,const unsigned int orphan, ExceptionInfo exception)A description of each parameter follows:o image: The image.o columns: The number of columns in the cloned image.o rows: The number of rows in the cloned image.o orphan:With a value other than 0, the cloned image is an orphan.An orphan is a stand-alone image that is not assocated with an image list. In effect, the next and previous members of the cloned image is set to NULL.o exception: Return any errors or warnings in this structure.
pthread_mutex_lock@plt #cmm:0
pthread_mutex_unlock@plt #cmm:0
GetGeometry #cmm:1 #$# G e t G e o m e t r yGetGeometry() parses a geometry specification and returns the width height, x, and y values.It also returns flags that indicates which of the four values (width, height, x, y) were located in the string, and whether the x and y values are negative.In addition, there are flags to report any meta characters (, !, <,>, @, and ^).The format of the GetGeometry method is:int GetGeometry(const char image_geometry,long x,long y, unsigned long width,unsigned long height)A description of each parameter follows:o flags:Method GetGeometry returns a bitmask that indicates which of the four values were located in the geometry string.o image_geometry:Specifies a character string representing the geometry specification.o x,y:The x and y offset as determined by the geometry specification is returned here.o width,height:The width and height as determined by the geometry specification is returned here.
CloneImageInfo #cmm:1 #$# C l o n e I m a g e I n f oCloneImageInfo() makes a copy of the given image info structure.If NULL is specified, a new image info structure is created initialized to default values.The format of the CloneImageInfo method is:ImageInfo CloneImageInfo(const ImageInfo image_info)A description of each parameter follows:o image_info: The image info.
AcquireCacheViewIndexes #cmm:1 #$# A c q u i r e C a c h e V i e w I n d e x e sMethod AcquireCacheViewIndexes returns read-only indexes associated with the specified view.The format of the AcquireCacheViewIndexes method is:const IndexPacket AcquireCacheViewIndexes(const ViewInfo view)A description of each parameter follows:o indexes: Method AcquireCacheViewIndexes returns the indexes associated with the specified view.o view: The address of a structure of type ViewInfo.MagickExport const IndexPacket
LogMagickEvent #cmm:0
WriteBlob #cmm:1 #$# +W r i t e B l o b WriteBlob() writes data to a blob or image file.It returns the number of bytes written.The format of the WriteBlob method is:size_t WriteBlob(Image image,const size_t length,const void data)A description of each parameter follows:o count:Method WriteBlob returns the number of bytes written to the blob.o image: The image.o length:Specifies an integer representing the number of bytes to write to the file.o data:The address of the data to write to the blob or file.
MagickStrToD #cmm:1 #$# + G e t M a g i c k D i m e n s i o nGetMagickDimension() parses a string in the scanf form lfxlf+lf+lf to obtain WIDTHxHEIGHT+XOFF+YOFF values and returns the number of values successfully parsed. This function exists to overcome a new behavior of ANSI C'99 which supports hex parsing.The format of the GetMagickDimension method is:int GetMagickDimension(const char str,double width,double height,double xoff,double yoff)A description of each parameter follows:o str:String to parseo width:First double valueo height: Second double valueo xoff: Third double value (usually x offset).May be NULL.o yoff: Fourth double value (usually y offset). May be NULL.
GetLocaleMessageFromTag #cmm:0
IsGlob #cmm:1 #$# + I s G l o bIsGlob() returns MagickTrue if the path specification contains a globbing pattern as supported by GlobExpression().Glob patterns supported are roughly equivalent to those supported by POSIX.2 glob().The format of the IsGlob method is:MagickBool IsGlob(const char path)A description of each parameter follows:o status: Returns MagickTrue if the path specification contains a globbing patten.o path: The path.
LocaleNCompare.part.8 #cmm:0
FormatString #cmm:0
AcquireString #cmm:1 #$# A c q u i r e S t r i n gAcquireString() allocates memory for a string and copies the source string to that memory location (and returns it). This method is best used to allocate constant strings since only enough memory to support the data is allocated.The format of the AcquireString method is:char AcquireString(const char source)A description of each parameter follows:o allocated_string:Method AcquireString returns a copy of the source string.o source: A character string.
ReadBlob #cmm:1 #$# +R e a d B l o b ReadBlob() reads data from the blob or image file and returns it.It returns the number of bytes read.The format of the ReadBlob method is:size_t ReadBlob(Image image,const size_t length,void data)A description of each parameter follows:o count:Method ReadBlob returns the number of bytes read.o image: The image.o length:Specifies an integer representing the number of bytes to read from the file.o data:Specifies an area to place the information requested from the file.
DestroyMagickModules #cmm:2 #$# + D e s t r o y M a g i c k M o d u l e sDestroyMagickModules() destroys the modules environment.The format of the DestroyMagickModules() method is:DestroyMagickModules(void)void
ChopLocaleComponents.part.0 #cmm:0
AcquireMagickResource #cmm:0
ExpandFilenames #cmm:1 #$# E x p a n d F i l e n a m e sMethod ExpandFilenames checks each argument of the command line vector and expands it if they have a wildcard character.For example, .jpg might expand to:bird.jpg rose.jpg tiki.jpg.The format of the ExpandFilenames function is:status=ExpandFilenames(int argc,char argv)A description of each parameter follows:o argc: Specifies a pointer to an integer describing the number of elements in the argument vector.o argv: Specifies a pointer to a text array containing the command line arguments.The existing argument list is replaced.
DestroyImageInfo #cmm:1 #$# D e s t r o y I m a g e I n f oDestroyImageInfo() deallocates memory associated with a ImageInfo structure.The format of the DestroyImageInfo method is:void DestroyImageInfo(ImageInfo image_info)A description of each parameter follows:o image_info: The image info.
DestroyExceptionInfo #cmm:1 #$# D e s t r o y E x c e p t i o n I n f oDestroyExceptionInfo() deallocates memory associated with exception.The format of the DestroyExceptionInfo method is:void DestroyExceptionInfo(ExceptionInfo exception)A description of each parameter follows:o exception: The exception info.
GetMagickResourceLimit #cmm:1 #$# G e t M a g i c k R e s o u r c e L i m i tGetMagickResourceLimit() returns the current maximum limit for the specified resource type.Returns a maximum 64-bit integer value if the resource has not been limited.The format of the GetMagickResourceLimit() method is:magick_int64_t GetMagickResourceLimit(const ResourceType type)A description of each parameter follows:o type: The type of resource.
GetImageInfo #cmm:1 #$# G e t I m a g e I n f oGetImageInfo() initializes image_info to default values.The format of the GetImageInfo method is:void GetImageInfo(ImageInfo image_info)A description of each parameter follows:o image_info: The image info.
png_read_row@plt #cmm:0
SetMagickInfo #cmm:1 #$# S e t M a g i c k I n f oMethod SetMagickInfo allocates a MagickInfo structure and initializes the members to default values.The format of the SetMagickInfo method is:MagickInfo SetMagickInfo(const char name)A description of each parameter follows:o magick_info: Method SetMagickInfo returns the allocated and initialized MagickInfo structure.o name: a character string that represents the image format associated with the MagickInfo structure.MagickExport MagickInfo
MagickStrlCat #cmm:1 #$# M a g i c k S t r l C a t Method MagickStrlCat appends the NULL-terminated string src to the end of dst.It will append at most size - strlen(dst) - 1 bytes, NULL- terminating the result. If size is zero, then the result is not NULL terminated. The total length of the string which would have been created given sufficient buffer size (may be longer than size) is returned.This function substitutes for strlcat() which is available under FreeBSD, Apple's OS-X, and Solaris 8.Buffer overflow can be checked asfollows:if (MagickStrlCat(dst, src, dstsize) >= dstsize) return -1;The format of the MagickStrlCat method is:size_t MagickStrlCat(char dst, const char src, size_t size)A description of each parameter follows. odst:Destination string. osrc:Source string. osize: Maximum string length, including the terminating null.
MagickFreeAligned #cmm:1 #$# M a g i c k F r e e A l i g n e d MagickFreeAligned() frees aligned memory that has previously been allocated via MagickMallocAligned(). For convenience, a NULL argument is ignored.This function exists in case the pointer allocated by MagickMallocAligned() can not be used directly with MagickFree().The format of the MagickFreeAligned method is:void MagickFreeAligned(void memory)A description of each parameter follows:o memory: A pointer to a block of memory to free for reuse.
MagickMalloc #cmm:1 #$# M a g i c k M a l l o cMagickMalloc() returns a pointer to a block of memory of at least size bytes suitably aligned for any use.NULL is returned if insufficient memory is available or the requested size is zero.The format of theMagickMalloc method is:voidMagickMalloc(const size_t size)A description of each parameter follows:o size: The size of the memory in bytes to allocate.
ConvertImageCommand #cmm:0
MogrifyImages #cmm:1 #$# + M o g r i f y I m a g e sMethod MogrifyImages applies next processing options to a sequence of images as prescribed by command line options.The format of the MogrifyImage method is:MagickPassFail MogrifyImages(const ImageInfo image_info,const int argc, char argv,Image images)A description of each parameter follows:o image_info: The image info..o argc: Specifies a pointer to an integer describing the number of elements in the argument vector.o argv: Specifies a pointer to a text array containing the command line arguments.o images: The image;returned from ReadImage.
OpenCache #cmm:0
MogrifyImage #cmm:1 #$# + M o g r i f y I m a g eMethod MogrifyImage applies image processing options to an image as prescribed by command line options.The format of the MogrifyImage method is:MagickPassFail MogrifyImage(const ImageInfo image_info,const int argc, char argv,Image image)A description of each parameter follows:o image_info: The image info..o argc: Specifies a pointer to an integer describing the number of elements in the argument vector.o argv: Specifies a pointer to a text array containing the command line arguments.o image: The image;returned from ReadImage.
png_get_data #cmm:0
GetConfigureBlob #cmm:0
png_put_data #cmm:0
MagickMapAddEntry #cmm:1 #$# + M a g i c k M a p A d d E n t r yMagickMapAddEntry() adds a new entry to a map, or replaces an existing matching entry.True is returned on success.If False is returned, then the exception argument describes the reason for failure.The format of the MagickMapAddEntry method is:void MagickMapAddEntry(MagickMap map,const char key,const void object, const size_t object_size)A description of each parameter follows:o map: map contexto key: unique keyo object: pointer to object data to copy.o object_size: size of object data. If the copy function does not require the object size, then the value zero may be used.o exception: check this argument for error information if False isreturned. MagickExport unsigned int
MagickSignal #cmm:1 #$# Signal function which prevents interrupted system calls from automatically being restarted. From W. Richard Stevens Advanced Programming in the UNIX Environment, Chapter 10.14.static Sigfunc
GetMagickInfoEntryLocked #cmm:1 #$# G e t M a g i c k I n f oGetMagickInfo() returns a pointer MagickInfo structure that matches the specified name.If name is NULL, the head of the image format list is returned. It is not safe to traverse the list by using the previous and next pointers in the MagickInfo structure since the list contents or order may be altered while the list is being traversed. If the list must be traversed, access it via the GetMagickInfoArray function instead.If GraphicsMagick has not been initialized via InitializeMagick() then this function will not work.The format of the GetMagickInfo method is: const MagickInfo GetMagickInfo(const char name,ExceptionInfo exception)A description of each parameter follows:o name: The image format we are looking for.o exception: Return any errors or warnings in this structure.static MagickInfo
GetDrawInfo #cmm:1 #$# + G e t D r a w I n f oMethod GetDrawInfo initializes draw_info to default values.The format of the GetDrawInfo method is:void GetDrawInfo(const ImageInfo image_info,DrawInfo draw_info)A description of each parameter follows:o image_info: The image info..o draw_info: The draw info.MagickExport void
DestroyDrawInfo #cmm:1 #$# D e s t r o y D r a w I n f oDestroyDrawInfo() deallocates memory associated with an DrawInfo structure.The format of the DestroyDrawInfo method is:void DestroyDrawInfo(DrawInfo draw_info)A description of each parameter follows:o draw_info: The draw info.MagickExport void
CloseBlob #cmm:1 #$# + C l o s e B l o bCloseBlob() closes a stream associated with the image.The final error status (based on any prior error occuring while doing I/O, including while closing the blob) is provided as a MagickPassFail indication.If the blob 'exempt' member is MagickTrue, then any passed file descriptor is left open, otherwise it is closed.The format of the CloseBlob method is:MagickPassFail CloseBlob(Image image)A description of each parameter follows:o image: The image.
RegisterMagickInfo #cmm:1 #$# R e g i s t e r M a g i c k I n f oRegisterMagickInfo() adds attributes for a particular image format to the list of supported formats.The attributes include the image format name, a method to read and/or write the format, whether the format supports the saving of more than one frame to the same file or blob, whether the format supports native in-memory I/O, and a brief description of the format.The format of the RegisterMagickInfo method is:MagickInfo RegisterMagickInfo(MagickInfo magick_info)A description of each parameter follows:o magick_info: The magick info. MagickExport MagickInfo
SetImageAttribute #cmm:0
LocaleUpper #cmm:1 #$# L o c a l e U p p e rMethod LocaleUpper transforms all of the characters in the supplied null-terminated string, changing all lowercase letters to uppercase.The format of the LocaleUpper method is:void LocaleUpper(char string)A description of each parameter follows:o string: A pointer to the string to convert to upper-case Locale.
GetBlobSize #cmm:1 #$# +G e t B l o b S i z e GetBlobSize() returns the current length of the image file or blob; zero is returned if the size cannot be determined.If BLOB is no longer open, then return the size when the BLOB was closed.The format of the GetBlobSize method is:magick_off_t GetBlobSize(const Image image)A description of each parameter follows:o size:Method GetBlobSize returns the current length of the image file or blob.o image: The image.
SetMagickResourceLimit.part.0 #cmm:0
MagickMapIterateNext #cmm:1 #$# + M a g i c k M a p I t e r a t e N e x tMagickMapIterateNext() advances the iterator by one element. True is returned if there are remaining entries in the map. The key argument is updated to point to the element key.The format of the MagickMapIterateNext method is: void MagickMapIterateToFront(MagickMapIterator iterator)A description of each parameter follows:o iterator: iterator contexto key: pointer to location to store a pointer to the key MagickExport unsigned int
MagickCondSignal #cmm:1 #$# Signal function which only sets the signal handler if it its handling is still set to SIG_DFL. This ensures that signal handlers are not registered for signals which are being ignored, or that the API user has already registered before invoking InitializeMagick.If an API user registers its own signal hander, then it is responsible for invoking DestroyMagick when a signal is received.static Sigfunc
InitializeMagickResources #cmm:1 #$# + I n i t i a l i z e M a g i c k R e s o u r c e sInitializeMagickResources() initializes the resource environment.The format of the InitializeMagickResources() method is:InitializeMagickResources(void)
ReadImage #cmm:0
RegisterPNGImage #cmm:0
FormatSize #cmm:1 #$# F o r m a t S i z e FormatSize() converts a size to a human readable format, for example, 14kb, 234mb, 2.7gb, or 3.0tb.Scaling is done by repetitively dividing by 1024.The format of the FormatSize method is:char FormatSize(const magick_int64_t size,char format)A description of each parameter follows:o size:convert this size to a human readable format.o format:human readable format.
ThrowLoggedException #cmm:1 #$# T h r o w L o g g e d E x c e p t i o nThrowLoggedException() throws an exception with the specified severity code, reason, optional description, source filename, function name, and line number. If logging is enabled, the exception is also logged.If the exception already contains an ErrorException (or greater) or the existing exception is more severe, then it is ignored.The format of the ThrowLoggedException method is:void ThrowLoggedException(ExceptionInfo exception, const ExceptionType severity,const char reason, const char description,const char module, const char function,const unsigned long lineA description of each parameter follows:o exception: The exception.o severity: The severity of the exception.o reason: The reason of the exception.o description: The exception description.o filename: The source module filename.o function: The function name.o line: The line number of the source module.
GetExceptionInfo #cmm:1 #$# G e t E x c e p t i o n I n f oGetExceptionInfo() initializes an exception to default values.The format of the GetExceptionInfo method is:GetExceptionInfo(ExceptionInfo exception)A description of each parameter follows:o exception: The exception info.
DestroyBlob #cmm:1 #$# D e s t r o y B l o bDestroyBlob() deallocates memory associated with a blob.The blob is a reference counted object so the object is only destroyed once its reference count decreases to zero.The format of the DestroyBlob method is:void DestroyBlob(Image image)A description of each parameter follows:o image: The image.
DestroyImage #cmm:1 #$# D e s t r o y I m a g eDestroyImage() dereferences an image, deallocating memory associated with the image if the reference count becomes zero.There is no effect if the image pointer is null.The format of the DestroyImage method is:void DestroyImage(Image image)A description of each parameter follows:o image: The image.
posix_memalign@plt #cmm:0
GetPathComponent #cmm:0
GMCommandSingle #cmm:1 #$# G M C o m m a n d S i n g l eGMCommandSingle() is used by GMCommand() and BatchCommand to run one single command of the 'gm' utility.The format of the GMCommandSingle method is:MagickPassFail GMCommandSingle(int argc,char argv)A description of each parameter follows:o argc: The number of elements in the argument vector.o argv: A text array containing the command line arguments.
MagickCommand #cmm:1 #$# M a g i c k C o m m a n dMagickCommand() invokes a GraphicsMagick utility subcommand based on the first argument supplied in the argument vector.The format of the MagickCommand method is:MagickPassFail MagickCommand(ImageInfo image_info,const int argc, char argv,char metadata,ExceptionInfo exception)A description of each parameter follows:o image_info: The image info.o argc: The number of elements in the argument vector.o argv: A text array containing the command line arguments.o metadata: any metadata is returned here.o exception: Return any errors or warnings in this structure.
DetachBlob #cmm:1 #$# D e t a c h B l o bDetachBlob() detaches a blob from the BlobInfo structure.The format of the DetachBlob method is:void DetachBlob(BlobInfo blob_info)A description of each parameter follows:o blob_info: Specifies a pointer to a BlobInfo structure.
GetMagickInfo #cmm:0
DestroyCacheInfo #cmm:1 #$# D e s t r o y C a c h e I n f oDestroyCacheInfo() deallocates memory associated with the pixel cache.The format of the DestroyCacheInfo() method is:void DestroyCacheInfo(Cache cache)A description of each parameter follows:o cache: Specifies a pointer to a Cache structure.void
AddConfigurePath #cmm:0
GetTimerInfo #cmm:1 #$# G e t T i m e r I n f oMethod GetTimerInfo initializes the TimerInfo structure.The format of the GetTimerInfo method is:void GetTimerInfo(TimerInfo time_info)A description of each parameter follows.otime_info: Timer statistics structure.
DestroyMagickInfo #cmm:1 #$# D e s t r o y M a g i c k I n f oDestroyMagickInfo() destroys a MagickInfo structure.The format of the DestroyMagickInfoList method is:void DestroyMagickInfo(MagickInfo magick_info) static void
GetBlobInfo #cmm:1 #$# G e t B l o b I n f oGetBlobInfo() initializes the BlobInfo structure.The format of the GetBlobInfo method is:void GetBlobInfo(BlobInfo blob_info)A description of each parameter follows:o blob_info: Specifies a pointer to a BlobInfo structure.
memcpy@plt #cmm:0
CheckImagePixelLimits #cmm:1 #$# C h e c k I m a g e P i x e l L i m i t sCheckImagePixelLimits() verifies that image dimensions are within current limits.Returns MagickPass if image dimensions are within limits, or MagickFail (and updates exception) if dimensions exceed a limit.While this function is used within the pixel cache to prevent allocating an image which exceeds the limits, it may also be used to validate image dimensions obtained from file headers prior to allocating memory or doing further processing of the image.Such additional limits should be after any 'ping' mode processing so that the image dimensions can still be shown by 'identify'.The format of the CheckImagePixelLimits() method is:MagickPassFail CheckImagePixelLimits(const Image image,ExceptionInfo exception)A description of each parameter follows:o image: Image to verify rows/columns.o exception: Throw exception into this ExceptionInfo structure.MagickExport MagickPassFail
WriteImage #cmm:1 #$# W r i t e I m a g eUse WriteImage() to write an image or an image sequence to a file or filehandle.If writing to a file on disk, the name is defined by the filename member of the image structure.WriteImage() returns MagickFailure is there is a memory shortage or if the image cannot be written.Check the exception member of image to determine the cause for any failure.The format of the WriteImage method is:MagickPassFail WriteImage(const ImageInfo image_info,Image image)A description of each parameter follows:o image_info: The image info.o image: The image.MagickExport MagickPassFail
WritePNGImage #cmm:0
ReadPNGImage #cmm:0
IsEventLogging #cmm:1 #$# I s E v e n t L o g g i n g IsEventLogging() returns True if logging of events is enabled otherwise False.The format of the IsEventLogging method is:unsigned int IsEventLogging(void)
png_write_row@plt #cmm:0
AllocateString #cmm:1 #$# A l l o c a t e S t r i n gAllocateString() allocates memory for a string and copies the source string to that memory location (and returns it). Additional memory is allocated so that subsequent concatenations to the string are most efficient.The format of the AllocateString method is:char AllocateString(const char source)A description of each parameter follows:o allocated_string:Method AllocateString returns a copy of the source string.o source: A character string.
MagickMapDestroyObject #cmm:1 #$# + M a g i c k M a p D e s t r o y O b j e c tMagickMapDestroyObject deallocates a map object by invoking the object's embedded deallocation function.The format of the MagickMapDestroyObject method is:void MagickMapDestroyObject(MagickMapObject object)A description of each parameter follows:o object: Pointer to object to destroy. static void
GetImageException #cmm:1 #$# G e t I m a g e E x c e p t i o nGetImageException() traverses an image sequence and returns any error more severe than noted by the exception parameter.The format of the GetImageException method is:void GetImageException(Image image,ExceptionInfo exception)A description of each parameter follows:o image: Specifies a pointer to a list of one or more images.o exception: return the highest severity exception.
WriteImages #cmm:1 #$# W r i t e I m a g e sWriteImages() writes an image sequence into one or more files.While WriteImage() will also write an image sequence, it is limited to writing the sequence into a single file using a format which supports multiple frames.WriteImages() does not have that limitation since it will generate multiple output files if necessary (or when requested).When ImageInfo's adjoin flag is set to MagickFalse, the file name is expected to include a printf-style formatting string for the frame number (e.g. image02d.miff) so that the frames may be written.The format of the WriteImages method is:MagickPassFail WriteImages(const ImageInfo image_info,Image image,const char filename,ExceptionInfo exception)A description of each parameter follows:o image_info: The image info.o images: The image list.o filename: The image filename.o exception: Return any errors or warnings in this structure.MagickExport MagickPassFail
png_IM_malloc #cmm:0
UserTime #cmm:1 #$# + U s e r T i m eMethod UserTime returns the total time the process has been scheduled (in seconds) since the last call to StartTimer().The format of the UserTime method is:double UserTime()
LiberateMagickResource #cmm:1 #$# L i b e r a t e M a g i c k R e s o u r c eLiberateMagickResource() liberates resources of the specified type.The format of the LiberateMagickResource() method is:void LiberateMagickResource(const ResourceType type, const magick_int64_t size)A description of each parameter follows:o type: The type of resource.o size: The size of the resource.
ReadLogConfigureFile #cmm:1 #$# + R e a d C o n f i g u r e F i l eReadLogConfigureFile() reads the log configuration file.The format of the ReadLogConfigureFile method is:unsigned int ReadLogConfigureFile(const char basename, const unsigned int depth,ExceptionInfo exception)A description of each parameter follows:o status: ReadLogConfigureFile() returns True if at least one log entry is defined otherwise False.o basename:The log configuration filename.o depth: depth of <include /> statements.o exception: Return any errors or warnings in this structure.
CloneImageAttributes #cmm:1 #$# C l o n e I m a g e A t t r i b u t e sCloneImageAttributes() copies the text attributes from one image to another. Any text attributes in the destination image are preserved. CloneImageAttributes returns MagickPass if all of the attribututes are successfully cloned or MagickFail if there is a memory allocation error.The format of the CloneImageAttributes method is:MagickPassFail CloneImageAttributes(Image clone_image, const Image original_image)A description of each parameter follows:o clone_image: The destination image.o original_image: The source image.MagickExport MagickPassFail
GetLocaleExceptionMessage.part.2 #cmm:0
MagickMapDeallocateMap #cmm:1 #$# + M a g i c k M a p D e a l l o c a t e M a pMagickMapDeallocateMap() deallocates a map, invoking the map deallocation function on each entry contained in the map.The format of the MagickMapDeallocateMap method is: void MagickMapDeallocateMap(MagickMap map)A description of each parameter follows:o map: map context to destroy MagickExport void
DestroyImageAttributes #cmm:0
DestroyImageAttribute.part.4 #cmm:0
InitializeMagick #cmm:0
strlen@plt #cmm:0
GetLocaleExceptionMessage #cmm:0
TransformImage #cmm:1 #$# T r a n s f o r m I m a g eTransformImage() is a convenience method that behaves like ResizeImage() or CropImage() but accepts scaling and/or cropping information as a region geometry specification.If the operation fails, the original image handle is returned.The format of the TransformImage method is:void TransformImage(Image image,const char crop_geometry, const char image_geometry)A description of each parameter follows:o image: The image The transformed image is returned as this parameter.o crop_geometry: A crop geometry string.This geometry defines a subregion of the image to crop.o image_geometry: An image geometry string.This geometry defines the final size of the image.
RemoveFirstImageFromList #cmm:1 #$# R e m o v e F i r s t I m a g e F r o m L i s tRemoveFirstImageFromList() removes an image from the beginning of the list.The format of the RemoveFirstImageFromList method is:Image RemoveFirstImageFromList(Image images)A description of each parameter follows:o images: The image list.
InitializeLogInfo #cmm:1 #$# + I n i t i a l i z e L o g I n f oMethod InitializeLogInfo initializes the logging facility.This function is invoked by InitializeMagick(), which must be invoked before using any other APIs.A memory-allocation failure in this function results in a fatal error for the whole program.All of the allocations performed by this function are released by DestroyLogInfo().The format of the InitializeLogInfo method is:MagickPassFail InitializeLogInfo(void)MagickPassFail
GetMagickGeometry #cmm:0
GetImageCharacteristics #cmm:0
MagickMapAllocateMap #cmm:1 #$# + M a g i c k M a p A l l o c a t e M a pMagickMapAllocateMap() allocates a new map context.The address of the functions required to copy and deallocate contained object data are provided when the map context is constructed. Objects contained in a map are all of the same type. A null map context is returned if the map construction fails.The format of the MagickMapAllocateMap method is:MagickMap MagickMapAllocateMap(MagickMapObjectClone clone,MagickMapObjectDeallocator deallocate)A description of each parameter follows:o clone: Pointer to function which copies contained object data.o deallocate: Pointer to function which deallocates contained object data. MagickExport MagickMap
GetBlobIsOpen #cmm:1 #$# +G e t B l o b I s O p e n GetBlobIsOpen() returns MagickTrue if the blob is currently open or MagickFalse if it is currently closed.The format of the GetBlobSize method is:MagickBool GetBlobIsOpen(const Image image)A description of each parameter follows:o image: The image.
MagickMapDereferenceIterator #cmm:1 #$# + M a g i c k M a p D e r e f e r e n c e I t e r a t o rMagickMapDereferenceIterator() dereferences a map iterator, providing access to the contained data and its size. The object_size parameter may be passed a null pointer if the object size is not required.The format of the MagickMapDereferenceIterator method is: const void MagickMapDereferenceIterator( const MagickMapIterator iterator, size_t object_size)A description of each parameter follows:o iterator: iterator contexto object_size: contained object size (if provided) MagickExport const void
MagickMapAllocateIterator #cmm:1 #$# + M a g i c k M a p A l l o c a t e I t e r a t o rMagickMapAllocateIterator allocates an iterator which may be used to traverse all the entries in the map. The iterator initially points to the front of the map.The format of the MagickMapAllocateIterator method is: MagickMapIterator MagickMapAllocateIterator(MagickMap map)A description of each parameter follows:o map: map context MagickExport MagickMapIterator
CloneBlobInfo #cmm:1 #$# C l o n e B l o b I n f oCloneBlobInfo() makes a duplicate of the given blob info structure, or if blob info is NULL, a new one.The format of the CloneBlobInfo method is:BlobInfo CloneBlobInfo(const BlobInfo blob_info)A description of each parameter follows:o clone_info: Method CloneBlobInfo returns a duplicate of the given blob info, or if blob info is NULL a new one.o quantize_info: a structure of type info.
WriteBlobMSBULong #cmm:0
DestroyMagick #cmm:1 #$# D e s t r o y M a g i c kDestroyMagick() destroys the GraphicsMagick environment, releasing all allocated semaphores, memory, and temporary files.This function should be invoked in the primary (original) thread of the application's process while shutting down, and only after any threads which might be using GraphicsMagick functions have terminated.Since GraphicsMagick uses threads internally via OpenMP, it is also necessary for any function calls into GraphicsMagick to have already returned so that OpenMP worker threads are quiesced and won't be accessing any semaphores or data structures which are destroyed by this function.The format of the DestroyMagick function is:DestroyMagick(void)MagickExport void
GetImageGeometry #cmm:1 #$# G e t I m a g e G e o m e t r yGetImageGeometry() returns a region as defined by the geometry string with respect to the image and its gravity.The format of the GetImageGeometry method is:int GetImageGeometry(const Image image,const char geometry, const unsigned int size_to_fit,RectangleInfo region_info)A description of each parameter follows:o flags:Method GetImageGeometry returns a bitmask that indicates which of the four values were located in the geometry string.o geometry:The geometry (e.g. 100x100+10+10).o size_to_fit:A value other than 0 means to scale the region so it fits within the specified width and height.o region_info: The region as defined by the geometry string with respect to the image and its gravity.
CopyException #cmm:1 #$# C o p y E x c e p t i o n CopyException() copies exception data from one ExceptionInfo structure to another.The format of the CopyException method is:void CopyException(ExceptionInfo copy, const ExceptionInfo original)A description of each parameter follows:o copy: The exception to copy to.o original: The exception to copy from.
SetClientName #cmm:0
GetImageAttribute #cmm:0
LiberateArgumentList.part.7 #cmm:0
png_IM_free #cmm:0
DestroyImagePixels #cmm:1 #$# D e s t r o y I m a g e P i x e l sDestroyImagePixels() deallocates memory associated with the pixel cache.The format of the DestroyImagePixels() method is:void DestroyImagePixels(Image image)A description of each parameter follows:o image: The image.MagickExport void
AppendImageToList #cmm:1 #$# A p p e n d I m a g e T o L i s tAppendImageToList() appends an image to the end of the list.The format of the AppendImageToList method is:AppendImageToList(Image images,Image image)A description of each parameter follows:o images: The image list.o image: The image.
CloneDrawInfo #cmm:1 #$# C l o n e D r a w I n f oCloneDrawInfo() makes a copy of the given draw info structure.If NULL is specified, a new DrawInfo structure is created initialized to default values.The format of the CloneDrawInfo method is:DrawInfo CloneDrawInfo(const ImageInfo image_info, const DrawInfo draw_info)A description of each parameter follows:o image_info: The image info.o draw_info: The draw info.MagickExport DrawInfo
MagickMapDeallocateIterator #cmm:1 #$# + M a g i c k M a p D e a l l o c a t e I t e r a t o rMagickMapDeallocateIterator() deallocates a map iteratorThe format of the MagickMapDeallocateIterator method is: void MagickMapDeallocateIterator(MagickMapIterator iterator)A description of each parameter follows:o iterator: iterator context to destroy MagickExport void
SeekBlob #cmm:1 #$# +S e e k B l o b SeekBlob() sets the offset in bytes from the beginning of a blob or file and returns the resulting offset.The format of the SeekBlob method is:magick_off_t SeekBlob(Image image,const magick_off_t offset, const int whence)A description of each parameter follows:o offset:Method SeekBlob returns the offset from the beginning of the file or blob.o image: The image.o offset:Specifies an integer representing the offset in bytes.o whence:Specifies an integer representing how the offset is treated relative to the beginning of the blob as follows:SEEK_SETSet position equal to offset bytes. SEEK_CURSet position to current location plus offset. SEEK_ENDSet position to EOF plus offset.
pthread_mutex_init@plt #cmm:0
pthread_mutexattr_init@plt #cmm:0
pthread_mutex_destroy@plt #cmm:0
__ctype_b_loc@plt #cmm:0
pthread_mutexattr_destroy@plt #cmm:0
__libc_csu_init #cmm:0
GetBlobTemporary #cmm:1 #$# G e t B l o b T e m p o r a r yGetBlobTemporary() returns MagickTrue if the file associated with the blob is a temporary file and should be removed when the associated image is destroyed.The format of the GetBlobTemporary method is:MagickBool GetBlobTemporary(const Image image)A description of each parameter follows:o image: Image to query
IsAccessibleNoLogging.part.5 #cmm:0
InitializeMagickSignalHandlers #cmm:1 #$# Establish signal handlers for common signals MagickExport void
DisassociateBlob #cmm:1 #$# +D i s a s s o c i a t e B l o bChecks if the blob of the specified image is referenced by other images. Ifthe reference count is higher then 1 a new blob is assigned to the image.The format of the DisassociateBlob method is:void DisassociateBlob(Image image)A description of each parameter follows.o image: The image.
BlobIsSeekable #cmm:1 #$# B l o b I s S e e k a b l eBlobIsSeekable() returns MagickTrue if the blob supports seeks (SeekBlob() is functional).The format of the BlobIsSeekable method is:MagickBool BlobIsSeekable(const Image image)A description of each parameter follows:o image: Image to query
InitializeLogInfoPost #cmm:1 #$# + I n i t i a l i z e L o g I n f o P o s tMethod InitializeLogInfoPost finishes initialization of the logging facility after the installation path is known.This function is invoked by InitializeMagick(), which must be invoked before using any other APIs.All of the allocations performed by this function are released by DestroyLogInfo().The format of the InitializeLogInfoPost method is:MagickPassFail InitializeLogInfoPost(void)MagickPassFail
SetGeometry #cmm:1 #$# S e t G e o m e t r ySetGeometry sets a grometry to its default values.The format of the SetGeometry method is:SetGeometry(const Image image,RectangleInfo geometry)A description of each parameter follows:o image: The image.o geometry: The geometry.
png_get_io_ptr@plt #cmm:0
SetBlobClosable #cmm:1 #$# S e t B l o b C l o s a b l eSetBlobClosable() enables closing the blob if MagickTrue is passed, and exempts the blob from being closed if False is passed.Blobs are closable by default (default MagickTrue).The format of the SetBlobClosable method is:void SetBlobClosable(Image image, MagickBool closeable)A description of each parameter follows:o image: Image to updateo closeable: Set to FALSE in order to disable closing the blob.
GMCommand #cmm:1 #$# G M C o m m a n dGMCommand() implements the 'gm' utility.The format of the GMCommand method is:int GMCommand(int argc,char argv)A description of each parameter follows:o argc: The number of elements in the argument vector.o argv: A text array containing the command line arguments.
MagickConfirmAccess #cmm:1 #$# M a g i c k C o n f i r m A c c e s sMagickConfirmAccess() calls the access confirmation handler method with parameters which describe the requested access mode and path/URL, as well as an ExceptionInfo structure to update with any error information.A user-provided callback (set by MagickSetConfirmAccessHandler()) is invoked.If the callback returns MagickFail, then this function also returns MagickFail, which is intended to determine if the operation may continue.The callback is expected to report the reason access is denied by filling out the ExceptionInfo structure.If the callback fails to do so, then a generic access denied error is reported.The format of the MagickConfirmAccess method is:MagickPassFail MagickConfirmAccess(const ConfirmAccessMode mode,const char path,ExceptionInfo exception)A description of each parameter follows:o mode: The type of access to be performed.o path: The local path or URL requested to be accessed.o exception: Return any errors or warnings in this structure. MagickExport MagickPassFail
TellBlob #cmm:1 #$# +T e l l B l o b TellBlob() obtains the current value of the blob or file position.The format of the TellBlob method is:magick_off_t TellBlob(const Image image)A description of each parameter follows:o offset:Method TellBlob returns the current value of the blob or file position success; otherwise, it returns -1 and sets errno to indicate the error.o image: The image.
__vsnprintf_chk@plt #cmm:0
UnregisterPNGImage #cmm:0
LocaleNCompare #cmm:1 #$# L o c a l e N C o m p a r eMethod LocaleNCompare performs a case-insensitive comparison of two strings byte-by-byte, according to the ordering of the current locale encoding. LocaleNCompare returns an integer greater than, equal to, or less than 0, if the string pointed to by p is greater than, equal to, or less than the string pointed to by q respectively.The sign of a non-zero return value is determined by the sign of the difference between the values of the first pair of bytes that differ in the strings being compared.The LocaleNCompare method makes the same comparison as LocaleCompare but looks at a maximum of n bytes.Bytes following a null byte are not compared.The format of the LocaleNCompare method is:int LocaleNCompare(const char p,const char q,const size_t n)A description of each parameter follows:o p: A pointer to a character string.o q: A pointer to a character string to compare to p.o length: The number of characters to compare in strings p & q.
IsAccessibleNoLogging #cmm:1 #$# I s A c c e s s i b l e N o L o g g i n g IsAccessibleNoLogging() returns MagickTrue if the file as defined by path exists and is accessable by the user. This version is used internally to avoid using the error logging of the normal version.The format of the IsAccessibleNoLogging method is:MagickBool IsAccessibleNoLogging(const char path)A description of each parameter follows.o status:Method IsAccessibleNoLogging returns MagickTrue if the file as defined by path exists and is a regular file, otherwise Magick False is returned.o path:A pointer to an array of characters containing the path.
GetQuantizeInfo #cmm:1 #$# G e t Q u a n t i z e I n f oGetQuantizeInfo() initializes the QuantizeInfo structure.The format of the GetQuantizeInfo method is:GetQuantizeInfo(QuantizeInfo quantize_info)A description of each parameter follows:o quantize_info: Specifies a pointer to a QuantizeInfo structure.
IdentityAffine #cmm:1 #$# I d e n t i t y A f f i n eMethod IdentityAffine initializes the affine transform to the identity matrix.The format of the IdentityAffine method is:IdentityAffine(AffineMatrix affine)A description of each parameter follows:o affine: A pointer the the affine transform of type AffineMatrix.
TransformColorspace #cmm:1 #$# + T r a n s f o r m C o l o r s p a c eMethod (void) TransformColorspace converts the image to a specified colorspace. If the image is already in the requested colorspace, no work is performed. Note that the current colorspace is stored in the image colorspace member. The transformation matrices are not necessarily the standard ones: the weights are rescaled to normalize the range of the transformed values to be [0..MaxRGB].The format of the (void) TransformColorspace method is:unsigned int (void) TransformColorspace(Image image, const ColorspaceType colorspace)A description of each parameter follows:o image: the image to transformo colorspace: the desired colorspace.
IsGeometry #cmm:1 #$# + I s G e o m e t r yMethod IsGeometry returns MagickTrue if the geometry specification is valid as determined by GetGeometry.The format of the IsGeometry method is:MagickBool IsGeometry(const char geometry)A description of each parameter follows:o status: Method IsGeometry returns MagickTrue if the geometry specification is valid otherwise MagickFalse is returned.o geometry: This string is the geometry specification.
GetPixelCachePresent #cmm:2 #$# GetPixelCachePresent() tests to see the pixel cache is present and contains pixels.extern MagickExport MagickBool
DestroyMagickResources #cmm:1 #$# + D e s t r o y M a g i c k R e s o u r c e sDestroyMagickResources() destroys the resource environment.The format of the DestroyMagickResources() method is:DestroyMagickResources(void)
DestroyMagickRandomGenerator #cmm:1 #$# Destroy the random number generator system.
GetLocaleMessageFromID #cmm:1 #$# This routine is used to lookup a message directly from an id pulled from the header file generated by the coderslocal.c header file coder. MagickExport const char
fwrite@plt #cmm:0
getenv@plt #cmm:0
memcmp@plt #cmm:0
DestroyImageList #cmm:1 #$# D e s t r o y I m a g e L i s tDestroyImageList() destroys an image list.There is no effect if the image pointer is null.The format of the DestroyImageList method is:void DestroyImageList(Image image)A description of each parameter follows:o image: The image sequence.
__ctype_toupper_loc@plt #cmm:0
InitializeMagickRandomGenerator #cmm:1 #$# Initialize the random number generator system.
DestroyMagickRegistry #cmm:1 #$# + D e s t r o y M a g i c k R e g i s t r yDestroyMagickRegistry() deallocates memory associated the magick registry.The format of the DestroyMagickRegistry method is: void DestroyMagickRegistry(void)
GetImageListLength #cmm:1 #$# G e t I m a g e L i s t L e n g t hGetImageListLength() returns the length of the list (the number of images in the list).The format of the GetImageListLength method is:unsigned long GetImageListLength(const Image images)A description of each parameter follows:o images: The image list.
fread@plt #cmm:0
register_tm_clones #cmm:0
__errno_location@plt #cmm:0
DestroyTypeInfo #cmm:1 #$# + D e s t r o y T y p e I n f oMethod DestroyTypeInfo deallocates memory associated with the font list.The format of the DestroyTypeInfo method is:DestroyTypeInfo(void)
MagickMapCopyString #cmm:1 #$# + M a g i c k M a p C o p y S t r i n gMagickMapCopyString() copies a string. It is intended for use as the clone function for strings so that C strings may easily be stored in a map.The format of the MagickMapCopyString method is: void MagickMapCopyString(const void string, const size_t size)A description of each parameter follows:o string: pointer to string datao size: ignored by this method. MagickExport void
DestroyLogInfo #cmm:1 #$# + D e s t r o y L o g I n f oMethod DestroyLogInfo deallocates memory associated with the log list.The format of the DestroyLogInfo method is:DestroyLogInfo(void)
DestroyDelegateInfo #cmm:1 #$# D e s t r o y D e l e g a t e I n f oMethod DestroyDelegateInfo deallocates memory associated with the delegates list.The format of the DestroyDelegateInfo method is:DestroyDelegateInfo(void)
__do_global_dtors_aux #cmm:0
MagickGetMMUPageSize #cmm:2 #$# M a g i c k G e t M M U P a g e S i z eMagickGetMMUPageSize() returns the VM pagesize used by the MMU. The VM pagesize is the number of bytes retrieved due to one page fault.The format of the MagickGetMMUPageSize method is:long MagickGetMMUPageSize()
PurgeTemporaryFiles #cmm:1 #$# + P u r g e T e m p o r a r y F i l e sPurgeTemporaryFiles reclaims all currently allocated temporary files, removing the files from the filesystem if they still exist.The temporary file allocation system remains usable after this function is called.void PurgeTemporaryFiles(void)
_start #cmm:0
png_get_valid@plt #cmm:0
GetBlobStatus #cmm:1 #$# G e t B l o b S t a t u sGetBlobStatus() returns the blob error status.For GraphicsMagick 1.3.26 and earlier, this was only set by CloseBlob() but now it is set immediately upon error.The format of the GetBlobStatus method is:int GetBlobStatus(const Image image)A description of each parameter follows:o image: The image.
GetClientName #cmm:1 #$# S e t C l i e n t N a m eMethod SetClientName sets the client name if the name is specified. Otherwise the current client name is returned.The default value returned if a value was never set is Magick.The format of the SetClientName method is:char SetClientName(const char name)A description of each parameter follows:o client_name: Method SetClientName returns the current client name.o status: Specifies the new client name.
AllocateImageProfileIterator #cmm:1 #$# A l l o c a t e I m a g e P r o f i l e I t e r a t o rAllocateImageProfileIterator allocates an iterator to traverse the image profile list.It is an error (i.e. will surely crash) to invoke DeleteImageProfile() on the profile that the iterator is currently referencing.However, it is safe to delete a profile that the iterator is not currently referencing. Inserting additional profiles does not invalidate the current iterator. The format of the AllocateImageProfileIterator method is:ImageProfileIterator AllocateImageProfileIterator(const Image image)A description of each parameter follows:o image: The image. MagickExport ImageProfileIterator
sigaction@plt #cmm:0
sigemptyset@plt #cmm:0
memset@plt #cmm:0
InitializeMagickRegistry #cmm:1 #$# + I n i t i a l i z e M a g i c k R e g i s t r yInitializeMagickRegistry() ensures that the magick registry is ready for use.The format of the InitializeMagickRegistry method is: void InitializeMagickRegistry(void)
DestroyThreadViewSet #cmm:0
ColorspaceTypeToString #cmm:1 #$# ColorspaceType
InitializeColorInfo #cmm:1 #$# + I n i t i a l i z e C o l o r I n f oMethod InitializeColorInfo initializes the color look-up facilityThe format of the InitializeColorInfo method is:MagickPassFail InitializeColorInfo(void)MagickPassFail
DestroyColorInfo #cmm:0
InitializeTypeInfo #cmm:1 #$# + I n i t i a l i z e T y p e I n f oMethod InitializeTypeInfo initializes the type facilityThe format of the InitializeTypeInfo method is:MagickPassFail InitializeTypeInfo(void)MagickPassFail
InitializeTemporaryFiles #cmm:1 #$# + I n i t i a l i z e T e m p o r a r y F i l e sMethod InitializeTemporaryFiles initializes the temporary file facilityThe format of the InitializeTemporaryFiles method is:MagickPassFail InitializeTemporaryFiles(void)MagickPassFail
InitializeMagickMonitor #cmm:1 #$# + I n i t i a l i z e M a g i c k M o n i t o rInitializeMagickMonitor() initializes the module loader.The format of the InitializeMagickMonitor() method is:MagickPassFail InitializeMagickMonitor(void)MagickPassFail
MagickRealloc #cmm:1 #$# M a g i c k R e a l l o cMagickRealloc() changes the size of the memory and returns a pointer to the (possibly moved) block.The contents will be unchanged up to the lesser of the new and old sizes.If size is zero, then the memory is freed and a NULL value is returned.If the memory allocation fails, then the existing memory is freed, and a NULL value is returned.The format of the MagickRealloc method is:void MagickRealloc(void memory,const size_t size)A description of each parameter follows:o memory: A pointer to a memory allocation.o size: The new size of the allocated memory.
InitializeMagickExceptionHandling #cmm:1 #$# + I n i t i a l i z e M a g i c k E x c e p t i o n H a n d l i n gMethod InitializeMagickExceptionHandling initializes the exception reporting facility so that exception reporting is thread safe. This function must be invoked before any exception is thrown. A memory-allocation failure in this function results in a fatal error for the whole program.All of the allocations performed by this function are released by DestroyMagickExceptionHandling().The format of the InitializeLogInfo method is:MagickPassFail InitializeLogInfo(void)MagickPassFail
InitializeDelegateInfo #cmm:1 #$# + I n i t i a l i z e D e l e g a t e I n f oMethod InitializeDelegateInfo initializes the delegate facilityThe format of the InitializeDelegateInfo method is:MagickPassFail InitializeDelegateInfo(void)MagickPassFail
InitializeConstitute #cmm:1 #$# + I n i t i a l i z e C o n s t i t u t eMethod InitializeConstitute initializes the constitute facilityThe format of the InitializeConstitute method is:MagickPassFail InitializeConstitute(void)MagickPassFail
MagickInitializeCommandInfo #cmm:1 #$# + M a g i c k I n i t i a l i z e C o m m a n d I n f oMethod MagickInitializeCommandInfo initializes the command parsing facility.The format of the MagickInitializeCommandInfo method is:MagickPassFail MagickInitializeCommandInfo(void)MagickPassFail
deregister_tm_clones #cmm:0
strtod@plt #cmm:0
MagickTsdSetSpecific #cmm:1 #$# Set the thread-specific value associated with the key.
MagickTsdKeyDelete #cmm:1 #$# Delete a thread-specific data key, invoking the registered destructor on any remaining non-NULL key values.
MagickTsdKeyCreate2 #cmm:1 #$# Create a thread specific data key (with destructor).
fopen@plt #cmm:0
__fxstat@plt #cmm:0
fileno@plt #cmm:0
MagickGetFileSystemBlockSize #cmm:1 #$# Get blocksize to use when accessing the filesystem.size_t
NewImageList #cmm:1 #$# N e w I m a g e L i s tNewImageList() creates an empty image list.The format of the NewImageList method is:Image NewImageList(void)
sysconf@plt #cmm:0
_init #cmm:0
DestroyTemporaryFiles #cmm:1 #$# + D e s t r o y T e m p o r a r y F i l e sDestroyTemporaryFiles reclaims all currently allocated temporary files, removing the files from the filesystem if they still exist.Also destroys the associated semaphore so that temporary file system can not be used again without invoking InitializeTemporaryFiles() to re-initialize it.void DestroyTemporaryFiles(void)
strrchr@plt #cmm:0
MagickXDestroyX11Resources #cmm:1 #$# M a g i c k X D e s t r o y X 1 1 R e s o u r c e sMagickXDestroyX11Resources() destroys all remaining allocations related to X11, and closes the X11 display. It is intended to be invoked by DestroyMagick().The format of the MagickXDestroyX11Resources method is:void MagickXDestroyX11Resources(void)A description of each parameter follows:MagickExport void
MagickMonitorActive #cmm:1 #$# + M a g i c k M o n i t o rA c t i v e MagickMonitorAtive() returns MagickTrue if a progress monitor callback has been registered, or MagickFalse if no progress monitor is active.The format of the MagickMonitorActive method is:MagickBool MagickMonitor(void) MagickBool
MagickMapDeallocateString #cmm:1 #$# + M a g i c k M a p D e a l l o c a t e S t r i n gMagickMapDeallocateString() deallocates a string. It is intended for use as the deallocate function for strings so that C strings may easily be stored in a map.The format of the MagickMapDeallocateString method is: void MagickMapDeallocateString(void string)A description of each parameter follows:o string: pointer to string data to deallocate extern MagickExport void
ClassTypeToString #cmm:1 #$# ClassType
frame_dummy #cmm:0
omp_get_max_threads@plt #cmm:0
access@plt #cmm:0
times@plt #cmm:0
clock_gettime@plt #cmm:0
ceil@plt #cmm:0
_fini #cmm:0
ferror@plt #cmm:0
png_create_info_struct@plt #cmm:0
png_set_keep_unknown_chunks@plt #cmm:0
fclose@plt #cmm:0
fseeko@plt #cmm:0
setvbuf@plt #cmm:0
GetClientPath #cmm:1 #$# S e t C l i e n t P a t hMethod SetClientPath sets the client path if the name is specified. Otherwise the current client path is returned. A zero-length string is returned if the client path has never been set.The format of the SetClientPath method is:char SetClientPath(const char path)A description of each parameter follows:o client_path: Method SetClientPath returns the current client path.o status: Specifies the new client path.
GetClientFilename #cmm:1 #$# S e t C l i e n t F i l e n a m eMethod SetClientFilename sets the client filename if the name is specified. Otherwise the current client filename is returned. On a UNIX system the client name and filename are often the same since file extensions are not very important, but on windows the distinction is very important.The format of the SetClientFilename method is:char SetClientFilname(const char name)A description of each parameter follows:o client_name: Method SetClientFilename returns the current client name.o status: Specifies the new client name.
DestroyMagickMonitor #cmm:1 #$# + D e s t r o y M a g i c k M o n i t o rDestroyMagickMonitor() destroys the monitor environment.The format of the DestroyMagickMonitor() method is:DestroyMagickMonitor(void)void
InitializeMagicInfo #cmm:1 #$# + I n i t i a l i z e M a g i c I n f oMethod InitializeMagicInfo initializes the file header magic detection facility.The format of the InitializeMagicInfo method is:MagickPassFail InitializeMagicInfo(void)MagickExport MagickPassFail
GetLocaleMessage #cmm:1 #$# G e t L o c a l e M e s s a g eGetLocaleMessage() returns a message in the current locale that matches the supplied tag.The format of the GetLocaleMessage method is:const char GetLocaleMessage(const char tag)A description of each parameter follows:o tag: Return a message that matches this tag in the current locale.MagickExport const char
DestroyMagickExceptionHandling #cmm:1 #$# + D e s t r o y M a g i c k E x c e p t i o n H a n d l i n gMethod DestroyMagickExceptionHandling deallocates resources allocated for exception handling.The format of the DestroyLogInfo method is:DestroyLogInfo(void)
DestroyConstitute #cmm:1 #$# + D e s t r o y C o n s t i t u t eDestroyConstitute() destroys the constitute environment.The format of the DestroyConstitute method is:DestroyConstitute(void)
MagickDestroyCommandInfo #cmm:1 #$# + M a g i c k D e s t r o y C o m m a n d I n f oMethod MagickDestroyCommandInfo deallocates memory associated with the command parser.The format of the MagickDestroyCommandInfo method is:void MagickDestroyCommandInfo(void)
png_set_interlace_handling@plt #cmm:0
_setjmp@plt #cmm:0
getrlimit@plt #cmm:0
fflush@plt #cmm:0
omp_set_num_threads@plt #cmm:0
png_set_longjmp_fn@plt #cmm:0
strcpy@plt #cmm:0
setlocale@plt #cmm:0
png_set_benign_errors@plt #cmm:0
png_get_gAMA@plt #cmm:0
zlibVersion@plt #cmm:0
png_get_sRGB@plt #cmm:0
MagickTsdGetSpecific #cmm:1 #$# Get the thread-specific value associated with the key.
InitializeMagickModules #cmm:2 #$# + I n i t i a l i z e M a g i c k M o d u l e sInitializeMagickModules() initializes the module loader.The format of the InitializeMagickModules() method is:InitializeMagickModules(void)void
InitializeSemaphore #cmm:1 #$# I n i t i a l i z e S e m a p h o r eMethod InitializeSemaphore initializes the semaphore environment.The format of the InitializeSemaphore method is:void InitializeSemaphore(void)
DestroySemaphore #cmm:1 #$# D e s t r o y S e m a p h o r eDestroySemaphore() destroys the semaphore environment.The format of the DestroySemaphore method is:void DestroySemaphore(void)
DestroyMagicInfo #cmm:1 #$# + D e s t r o y M a g i c I n f oMethod DestroyMagicInfo deallocates memory associated with the magic list.The format of the DestroyMagicInfo method is:DestroyMagicInfo(void)MagickExport void
main #cmm:2 #$# ---------------------------------------------------------------------- main --This is the main program for the application. Results:None: Tcl_Main never returns here, so this procedure neverreturns either. Side effects:Whatever the application does.----------------------------------------------------------------------int
png_set_write_fn@plt #cmm:0
png_get_libpng_ver@plt #cmm:0
pthread_setspecific@plt #cmm:0
png_get_text@plt #cmm:0
png_get_bKGD@plt #cmm:0
png_set_IHDR@plt #cmm:0
png_set_user_limits@plt #cmm:0
png_set_oFFs@plt #cmm:0
png_set_bKGD@plt #cmm:0
png_create_write_struct_2@plt #cmm:0
png_get_header_ver@plt #cmm:0
omp_get_num_procs@plt #cmm:0
png_get_IHDR@plt #cmm:0
pthread_getspecific@plt #cmm:0
png_set_compression_level@plt #cmm:0
pthread_key_delete@plt #cmm:0
png_create_read_struct_2@plt #cmm:0
png_set_check_for_invalid_index@plt #cmm:0
ftello@plt #cmm:0
png_get_tRNS@plt #cmm:0
png_write_end@plt #cmm:0
png_set_crc_action@plt #cmm:0
png_set_compression_mem_level@plt #cmm:0
png_read_end@plt #cmm:0
__strcpy_chk@plt #cmm:0
png_read_info@plt #cmm:0
png_destroy_write_struct@plt #cmm:0
crc32@plt #cmm:0
png_set_filter@plt #cmm:0
pthread_key_create@plt #cmm:0
png_write_info@plt #cmm:0
png_destroy_read_struct@plt #cmm:0
png_set_packing@plt #cmm:0
png_set_read_fn@plt #cmm:0
png_set_sig_bytes@plt #cmm:0
png_set_read_user_chunk_fn@plt #cmm:0
png_get_rowbytes@plt #cmm:0
png_set_compression_buffer_size@plt #cmm:0
png_read_update_info@plt #cmm:0
